[INCLUDE=presentation]
Title   : Java编码规范  
Author        : Fangfang Hao    

[TITLE]

# Double-checked locking  

Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a synchronized block is entered to determine whether or not to initialize the object.
It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than float or int. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object risks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the program.


# Iterate through map  

使用entrySet遍历Map类集合KV，而不是keySet方式进行遍历。 说明：keySet其实是遍历了2次，一次是转为Iterator对象，另一次是从hashMap中取出key所对应的value。而entrySet只是遍历了一次就把key和value都放到了entry中，效率更高。如果是JDK8，使用Map.foreach方法。 正例：values()返回的是V值集合，是一个list集合对象；keySet()返回的是K值集合，是一个Set集合对象；entrySet()返回的是K-V值组合集合。 


# 魔法值  

* 不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。 
* 反例：String key = "Id#taobao_" + tradeId; cache.put(key, value); 


# Object的equals  

* Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals.
* 正例："test".equals(object);
* 反例：object.equals("test");

# String的split方法

使用索引访问用String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛IndexOutOfBoundsException的风险。 

说明：  
String str = "a,b,c,,";  
String[] ary = str.split(",");   
// 预期大于3，结果是3   
System.out.println(ary.length); 

# 字符串的连接

循环体内，字符串的连接方式，使用StringBuilder的append方法进行扩展。  
说明：下例中，反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString方法返回String对象，造成内存资源浪费。   

反例：   
String str = "start";   
for (int i = 0; i < 100; i++) {   
str = str + "hello";   
}   

# 集合转数组  
使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()。   
说明：使用toArray带参方法，入参分配的数组空间不够大时，toArray方法内部将重新分配内存空间，并返回新数组地址；
如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。  
正例：  
List<String> list = new ArrayList<String>(2);   
list.add("guan");   
list.add("bao");   
String[] array = new String[list.size()];   
array = list.toArray(array);   //此处不用赋值  
反例：  
直接使用toArray无参方法存在问题，此方法返回值只能是Object[]类，若强转其它类型数组将出现ClassCastException错误。 


# 数组转集合
使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。   
说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。  
 String[] str = new String[] { "you", "wu" };    
 List list = Arrays.asList(str);   
 第一种情况：list.add("yangguanbao"); 运行时异常。   
 第二种情况：str[0] = "gujin"; 那么list.get(0)也会随之修改。 

# Try-with-resources
Finally块必须对资源对象、流对象进行关闭。Try-with-resources方法确保每个resource在使用后被关闭.  
Example:  
static String readFirstLineFromFile(String path) throws IOException {  
  try (BufferedReader br = new BufferedReader(new FileReader(path))) {  
  return br.readLine();  
  }
}

## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
